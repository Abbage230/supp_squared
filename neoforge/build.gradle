plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge ()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}




processResources {
    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand rootProject.ext.replaceProperties + [project: project]
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "neoforge"
    atAccessWideners.add("${rootProject.mod_id}.accesswidener") // this is a path inside the mod jar
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }

    archiveClassifier = "neoforge-sources"
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        maven {
            url = "https://www.cursemaven.com"
            allowInsecureProtocol = true
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    neoForge "net.neoforged:neoforge:${neo_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')


    implementation 'org.jetbrains:annotations:22.0.0'

    modImplementation("net.mehvahdjukaar:moonlight-neoforge:${moonlight_version}")
   // modImplementation("net.mehvahdjukaar.supplementaries:supplementaries-${project.supplementaries_version}-d-neoforge")

    modCompileOnly("curse.maven:jei-238222:3928388")
    modCompileOnly ("curse.maven:configured-457570:5180900")

    modCompileOnly("curse.maven:quark-243121:5594847")
    modCompileOnly("curse.maven:zeta-968868:5597406")



    modCompileOnly("curse.maven:emi-580555:5704405")

}

tasks.withType(JavaCompile).configureEach {
    it.options.compilerArgs.add("-Acrafttweaker.processor.document.output_directory=${new File(rootProject.buildDir, "docsOut")}")
    it.options.compilerArgs.add("-Acrafttweaker.processor.document.multi_source=true")

    it.options.compilerArgs << "-Xmaxerrs" << "4000"

}